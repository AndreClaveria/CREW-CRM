// services/ai.service.ts - INTERFACES MISES √Ä JOUR

const AI_API_URL =
  process.env.NEXT_PUBLIC_API_URL_IA || "http://localhost:3005/api/";

// ‚úÖ Interface compl√®te correspondant exactement √† votre API
export interface AIAnalysisResult {
  // Donn√©es de base (existantes)
  score: number; // Score de 0 √† 100
  recommendation?: string; // Recommandation d'action simple
  reasoning?: string; // Raisonnement de l'IA
  priority:
    | "disqualified"
    | "low"
    | "medium"
    | "high"
    | "critical"
    | "basse"
    | "moyenne"
    | "haute";
  nextAction?: string; // Prochaine action recommand√©e
  timeframe?: string; // D√©lai recommand√©

  // ‚úÖ Nouvelles donn√©es compl√®tes de votre API
  category?: string; // Cat√©gorie du client (ex: "r√©vision")
  timestamp?: string; // Timestamp de l'analyse

  // Arrays d√©taill√©s
  strengths?: string[]; // Forces du client
  weaknesses?: string[]; // Faiblesses du client

  // Recommandations d√©taill√©es
  recommendations?: {
    immediate?: string; // Actions imm√©diates
    shortTerm?: string; // Court terme
    longTerm?: string; // Long terme
  };

  // √âvaluation des risques
  riskAssessment?: {
    level?: string; // "high", "medium", "low"
    factors?: string[]; // Facteurs de risque
    mitigation?: string; // Strat√©gie d'att√©nuation
  };

  // Plan d'action d√©taill√©
  nextSteps?: {
    action?: string; // Action √† mener
    timeframe?: string; // D√©lai pour l'action
    responsible?: string; // Responsable
    success_metrics?: string; // M√©triques de succ√®s
  };
}

// ‚úÖ Interface pour la r√©ponse compl√®te de l'API
export interface AIAnalysisResponse {
  success: boolean;
  clientId: string;
  analysis: AIAnalysisResult;
  timestamp: string;
}

export interface AIHealthStatus {
  status: "healthy" | "degraded" | "unhealthy";
  message: string;
  timestamp: Date;
  services?: {
    [key: string]: "up" | "down";
  };
}

// Interface pour les erreurs de l'API IA
export interface AIError {
  error: string;
  message: string;
  clientId?: string;
  timestamp: Date;
}

const headers = {
  "Content-Type": "application/json",
};

/**
 * V√©rification de l'√©tat de sant√© du service IA
 */
export const checkAIHealth = async (): Promise<AIHealthStatus> => {
  try {
    const token = localStorage.getItem("token");
    if (!token) {
      throw new Error("Non authentifi√©");
    }

    console.log(`üîç V√©rification sant√© du service IA: ${AI_API_URL}/health`);

    const response = await fetch(`http://localhost:3005/health`, {
      method: "GET",
      headers: {
        ...headers,
        Authorization: `Bearer ${token}`,
      },
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(
        errorData.message || "Erreur lors de la v√©rification du service IA"
      );
    }

    const data = await response.json();
    console.log("‚úÖ Service IA disponible:", data);

    return {
      status: data.status || "healthy",
      message: data.message || "Service IA op√©rationnel",
      timestamp: new Date(data.timestamp || Date.now()),
      services: data.services,
    };
  } catch (error: any) {
    console.error("‚ùå Erreur lors de la v√©rification du service IA:", error);

    return {
      status: "unhealthy",
      message: error.message || "Service IA indisponible",
      timestamp: new Date(),
    };
  }
};

/**
 * ‚úÖ Analyser un client sp√©cifique avec l'IA - MISE √Ä JOUR
 */
export const analyzeClient = async (
  clientId: string
): Promise<AIAnalysisResult> => {
  try {
    const token = localStorage.getItem("token");
    if (!token) {
      throw new Error("Non authentifi√©");
    }

    if (!clientId) {
      throw new Error("ID du client requis pour l'analyse");
    }

    console.log(`ü§ñ D√©but de l'analyse IA pour le client: ${clientId}`);

    // ‚úÖ URL coh√©rente
    const analyzeUrl = `${AI_API_URL}ai/analyze/${clientId}`;
    console.log(`üì° URL d'analyse: ${analyzeUrl}`);

    const response = await fetch(analyzeUrl, {
      method: "GET",
      headers: {
        ...headers,
        Authorization: `Bearer ${token}`,
      },
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error("‚ùå Erreur r√©ponse API IA:", errorData);
      throw new Error(
        errorData.message || `Erreur lors de l'analyse du client ${clientId}`
      );
    }

    const data = await response.json();
    console.log("üéØ R√©sultat de l'analyse IA brut:", data);

    // ‚úÖ G√©rer le format de r√©ponse de votre API
    let analysisResult: AIAnalysisResult;

    if (data.success && data.analysis) {
      // Format: { success: true, analysis: AIAnalysisResult, clientId, timestamp }
      analysisResult = {
        ...data.analysis,
        timestamp: data.timestamp, // Ajouter le timestamp de la r√©ponse
      };
    } else if (data.score !== undefined) {
      // Format direct: AIAnalysisResult
      analysisResult = data as AIAnalysisResult;
    } else {
      throw new Error("Format de r√©ponse invalide du service IA");
    }

    // Validation des donn√©es requises
    if (typeof analysisResult.score !== "number") {
      throw new Error("Score manquant dans la r√©ponse IA");
    }

    console.log("‚úÖ Analyse IA termin√©e:", {
      score: analysisResult.score,
      category: analysisResult.category,
      priority: analysisResult.priority,
      strengthsCount: analysisResult.strengths?.length || 0,
      weaknessesCount: analysisResult.weaknesses?.length || 0,
      hasRecommendations: !!analysisResult.recommendations,
      hasRiskAssessment: !!analysisResult.riskAssessment,
      hasNextSteps: !!analysisResult.nextSteps,
    });

    // ‚úÖ Retourner les donn√©es compl√®tes avec fallbacks pour compatibilit√©
    return {
      score: analysisResult.score,
      category: analysisResult.category,
      priority: analysisResult.priority || "medium",
      reasoning: analysisResult.reasoning || "Raisonnement non fourni",
      timestamp: analysisResult.timestamp,

      // Donn√©es d√©taill√©es (nouvelles)
      strengths: analysisResult.strengths || [],
      weaknesses: analysisResult.weaknesses || [],
      recommendations: analysisResult.recommendations,
      riskAssessment: analysisResult.riskAssessment,
      nextSteps: analysisResult.nextSteps,

      // Fallbacks pour compatibilit√© avec l'ancien format
      recommendation:
        analysisResult.recommendation ||
        analysisResult.recommendations?.immediate ||
        "Aucune recommandation disponible",
      nextAction:
        analysisResult.nextAction ||
        analysisResult.nextSteps?.action ||
        "Contacter le client",
      timeframe:
        analysisResult.timeframe ||
        analysisResult.nextSteps?.timeframe ||
        "Cette semaine",
    };
  } catch (error: any) {
    console.error(
      `‚ùå Erreur lors de l'analyse IA du client ${clientId}:`,
      error
    );
    throw new Error(error.message || "Erreur lors de l'analyse IA du client");
  }
};

/**
 * Analyser plusieurs clients en lot (optionnel pour futures fonctionnalit√©s)
 */
export const analyzeBatchClients = async (
  clientIds: string[]
): Promise<AIAnalysisResult[]> => {
  try {
    console.log(`üîÑ Analyse en lot de ${clientIds.length} clients`);
    const results: AIAnalysisResult[] = [];

    // Analyser chaque client individuellement pour √©viter de surcharger l'API
    for (const clientId of clientIds) {
      try {
        const result = await analyzeClient(clientId);
        results.push(result);

        // Petite pause entre chaque analyse pour √©viter le rate limiting
        await new Promise((resolve) => setTimeout(resolve, 500));
        console.log(
          `‚úÖ Client ${clientId} analys√© (${results.length}/${clientIds.length})`
        );
      } catch (error) {
        console.warn(
          `‚ö†Ô∏è √âchec de l'analyse pour le client ${clientId}:`,
          error
        );
        // Continuer avec les autres clients m√™me si un √©choue
      }
    }

    console.log(
      `üéØ Analyse en lot termin√©e: ${results.length}/${clientIds.length} r√©ussies`
    );
    return results;
  } catch (error: any) {
    console.error("‚ùå Erreur lors de l'analyse en lot:", error);
    throw new Error(
      error.message || "Erreur lors de l'analyse en lot des clients"
    );
  }
};

/**
 * Fonction utilitaire pour formater le score IA (seuils stricts)
 */
export const formatAIScore = (score: number): string => {
  if (score >= 90) return "üî• Exceptionnel";
  if (score >= 80) return "üü¢ Excellent";
  if (score >= 70) return "üü° Bon";
  if (score >= 50) return "üü† Moyen";
  if (score >= 30) return "üî¥ Faible";
  return "üíÄ Disqualifi√©";
};

/**
 * ‚úÖ Fonction utilitaire pour formater la priorit√© - MISE √Ä JOUR
 */
export const formatPriority = (
  priority: AIAnalysisResult["priority"]
): string => {
  switch (priority) {
    case "critical":
      return "üö® Critique";
    case "high":
    case "haute":
      return "üî¥ Haute";
    case "medium":
    case "moyenne":
      return "üü° Moyenne";
    case "low":
    case "basse":
      return "üü¢ Basse";
    case "disqualified":
      return "‚ùå Disqualifi√©";
    default:
      return "‚ö™ Non d√©finie";
  }
};

/**
 * Obtenir la couleur du score pour l'affichage (seuils stricts)
 */
export const getScoreColor = (score: number): string => {
  if (score >= 90) return "#FF4500"; // Rouge-orange (exceptionnel)
  if (score >= 80) return "#4CAF50"; // Vert (excellent)
  if (score >= 70) return "#2196F3"; // Bleu (bon)
  if (score >= 50) return "#FF9800"; // Orange (moyen)
  if (score >= 30) return "#FFC107"; // Jaune (faible)
  return "#9E9E9E"; // Gris (disqualifi√©)
};

/**
 * ‚úÖ Obtenir la couleur de la priorit√© - MISE √Ä JOUR
 */
export const getPriorityColor = (
  priority: AIAnalysisResult["priority"]
): string => {
  switch (priority) {
    case "critical":
      return "#D32F2F"; // Rouge fonc√©
    case "high":
    case "haute":
      return "#F44336"; // Rouge
    case "medium":
    case "moyenne":
      return "#FF9800"; // Orange
    case "low":
    case "basse":
      return "#4CAF50"; // Vert
    case "disqualified":
      return "#9E9E9E"; // Gris
    default:
      return "#9E9E9E"; // Gris
  }
};

/**
 * Fonction utilitaire pour formater le d√©lai
 */
export const formatTimeframe = (timeframe: string): string => {
  const lowerTimeframe = timeframe.toLowerCase();

  if (
    lowerTimeframe.includes("urgent") ||
    lowerTimeframe.includes("imm√©diat") ||
    lowerTimeframe.includes("critique")
  ) {
    return "üö® Urgent";
  }
  if (lowerTimeframe.includes("24h") || lowerTimeframe.includes("24 h")) {
    return "‚ö° 24h";
  }
  if (lowerTimeframe.includes("semaine")) {
    return "üìÖ Cette semaine";
  }
  if (lowerTimeframe.includes("mois")) {
    return "üìÜ Ce mois";
  }

  return `‚è∞ ${timeframe}`;
};

/**
 * Test de connectivit√© avec le service IA
 */
export const testAIConnection = async (): Promise<boolean> => {
  try {
    const healthStatus = await checkAIHealth();
    return healthStatus.status === "healthy";
  } catch (error) {
    console.error("‚ùå Test de connexion IA √©chou√©:", error);
    return false;
  }
};

/**
 * ‚úÖ NOUVELLE: Fonction pour obtenir l'ic√¥ne selon le score
 */
export const getScoreIcon = (score: number): string => {
  if (score >= 90) return "üî•";
  if (score >= 80) return "üöÄ";
  if (score >= 70) return "‚úÖ";
  if (score >= 50) return "‚ö†Ô∏è";
  if (score >= 30) return "‚ùå";
  return "üíÄ";
};

/**
 * ‚úÖ NOUVELLE: Fonction pour obtenir l'action recommand√©e selon le score
 */
export const getRecommendedAction = (score: number): string => {
  if (score >= 90) return "Action imm√©diate CEO";
  if (score >= 80) return "Contact commercial urgent";
  if (score >= 70) return "Programmer RDV";
  if (score >= 50) return "Qualification approfondie";
  if (score >= 30) return "Nurturing automatique";
  return "Archiver";
};

/**
 * ‚úÖ NOUVELLE: V√©rifier si un client doit √™tre re-analys√©
 */
export const shouldReanalyze = (
  lastAnalysis: Date,
  clientData: any
): boolean => {
  if (!lastAnalysis) return true;

  const daysSinceAnalysis = Math.floor(
    (Date.now() - lastAnalysis.getTime()) / (1000 * 60 * 60 * 24)
  );

  // Re-analyser si :
  // - Plus de 7 jours depuis la derni√®re analyse
  // - Nouvelles interactions depuis
  // - Budget modifi√©
  return (
    daysSinceAnalysis > 7 ||
    (clientData.lastContactDate &&
      new Date(clientData.lastContactDate) > lastAnalysis)
  );
};
