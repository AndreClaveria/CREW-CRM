openapi: 3.0.0
info:
  title: AI Microservice API
  version: 1.0.0
  description: Documentation de l'API du microservice d'intelligence artificielle et chatbot pour le CRM CREW
  contact:
    name: Support
    email: csupport@crewcrm.fr

servers:
  - url: http://localhost:3003
    description: Serveur de développement
  - url: https://api.crew.fr/ai
    description: Serveur de production

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # AI Analysis Schemas
    ClientAnalysis:
      type: object
      properties:
        score:
          type: number
          minimum: 0
          maximum: 100
          description: Score d'analyse du client (0-100)
        insights:
          type: array
          items:
            type: string
          description: Insights générés par l'IA
        recommendations:
          type: array
          items:
            type: string
          description: Recommandations pour le client
        riskLevel:
          type: string
          enum: [low, medium, high]
          description: Niveau de risque identifié
        opportunities:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              description:
                type: string
              priority:
                type: string
                enum: [low, medium, high]
      example:
        score: 85
        insights:
          - "Client actif avec un historique d'achats régulier"
          - "Préférence pour les produits premium"
        recommendations:
          - "Proposer une offre de fidélité"
          - "Cibler avec des produits complémentaires"
        riskLevel: "low"
        opportunities:
          - type: "upselling"
            description: "Potentiel d'upgrade vers gamme premium"
            priority: "high"

    ClientAnalysisResponse:
      type: object
      properties:
        success:
          type: boolean
        clientId:
          type: string
        analysis:
          $ref: "#/components/schemas/ClientAnalysis"
        timestamp:
          type: string
          format: date-time
      example:
        success: true
        clientId: "client123"
        analysis:
          score: 85
          insights: ["Client actif avec un historique d'achats régulier"]
          recommendations: ["Proposer une offre de fidélité"]
          riskLevel: "low"
        timestamp: "2025-08-17T10:30:00.000Z"

    # Chatbot Schemas
    ChatMessage:
      type: object
      properties:
        id:
          type: string
          description: Identifiant unique du message
        content:
          type: string
          description: Contenu du message
        role:
          type: string
          enum: [user, assistant]
          description: Rôle de l'expéditeur
        timestamp:
          type: string
          format: date-time
          description: Horodatage du message
        metadata:
          type: object
          properties:
            navigationType:
              type: string
              enum: [route, feature]
            suggestedRoute:
              type: string
            relatedPages:
              type: array
              items:
                type: string
      example:
        id: "msg123"
        content: "Comment ajouter un nouveau client ?"
        role: "user"
        timestamp: "2025-08-17T10:30:00.000Z"

    NavigationContext:
      type: object
      properties:
        currentRoute:
          type: string
          description: Route actuelle de l'utilisateur
        userRole:
          type: string
          description: Rôle de l'utilisateur
        recentActions:
          type: array
          items:
            type: string
          description: Actions récentes de l'utilisateur
      example:
        currentRoute: "/dashboard/clients"
        userRole: "manager"
        recentActions: ["Recherche: nouveau client"]

    ChatbotResponse:
      type: object
      properties:
        message:
          type: string
          description: Réponse du chatbot
        confidence:
          type: number
          minimum: 0
          maximum: 1
          description: Niveau de confiance de la réponse
        suggestedActions:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              route:
                type: string
              description:
                type: string
      example:
        message: "Pour ajouter un nouveau client, rendez-vous dans la section Clients et cliquez sur 'Ajouter un client'."
        confidence: 0.95
        suggestedActions:
          - label: "Aller aux clients"
            route: "/dashboard/clients"
            description: "Accéder à la liste des clients"

    ChatRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Message de l'utilisateur
        sessionId:
          type: string
          description: Identifiant de session (généré automatiquement si non fourni)
        context:
          $ref: "#/components/schemas/NavigationContext"
        conversationHistory:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessage"
      example:
        message: "Comment ajouter un nouveau client ?"
        sessionId: "session123"
        context:
          currentRoute: "/dashboard"
          userRole: "manager"

    ChatResponse:
      type: object
      properties:
        sessionId:
          type: string
        response:
          $ref: "#/components/schemas/ChatbotResponse"
        conversation:
          type: object
          properties:
            lastMessage:
              $ref: "#/components/schemas/ChatMessage"
            messageCount:
              type: number
            context:
              $ref: "#/components/schemas/NavigationContext"
        metadata:
          type: object
          properties:
            timestamp:
              type: string
              format: date-time
            processingTime:
              type: number
              description: Temps de traitement en millisecondes
      example:
        sessionId: "session123"
        response:
          message: "Pour ajouter un nouveau client, rendez-vous dans la section Clients."
          confidence: 0.95
        conversation:
          messageCount: 2
        metadata:
          timestamp: "2025-08-17T10:30:00.000Z"
          processingTime: 150

    ContextualHelpRequest:
      type: object
      required:
        - currentRoute
      properties:
        currentRoute:
          type: string
          description: Route actuelle pour laquelle demander de l'aide
        userRole:
          type: string
          description: Rôle de l'utilisateur
        sessionId:
          type: string
          description: Identifiant de session
      example:
        currentRoute: "/dashboard/clients"
        userRole: "manager"
        sessionId: "session123"

    ContextualHelpResponse:
      type: object
      properties:
        route:
          type: string
        help:
          $ref: "#/components/schemas/ChatbotResponse"
        timestamp:
          type: string
          format: date-time
      example:
        route: "/dashboard/clients"
        help:
          message: "Cette page vous permet de gérer vos clients. Vous pouvez ajouter, modifier ou supprimer des clients."
          confidence: 0.98
        timestamp: "2025-08-17T10:30:00.000Z"

    SearchRequest:
      type: object
      required:
        - searchTerm
      properties:
        searchTerm:
          type: string
          description: Terme à rechercher
        sessionId:
          type: string
          description: Identifiant de session
      example:
        searchTerm: "ajouter client"
        sessionId: "session123"

    SearchResponse:
      type: object
      properties:
        searchTerm:
          type: string
        results:
          $ref: "#/components/schemas/ChatbotResponse"
        timestamp:
          type: string
          format: date-time
      example:
        searchTerm: "ajouter client"
        results:
          message: "Voici les fonctionnalités liées à l'ajout de clients"
          suggestedActions:
            - label: "Ajouter un client"
              route: "/dashboard/clients/add"
        timestamp: "2025-08-17T10:30:00.000Z"

    ConversationHistory:
      type: object
      properties:
        sessionId:
          type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessage"
        context:
          $ref: "#/components/schemas/NavigationContext"
        lastActivity:
          type: string
          format: date-time
        messageCount:
          type: number
      example:
        sessionId: "session123"
        messages: []
        context:
          currentRoute: "/dashboard"
        lastActivity: "2025-08-17T10:30:00.000Z"
        messageCount: 5

    ChatbotStats:
      type: object
      properties:
        totalSessions:
          type: number
        activeSessions:
          type: number
        totalMessages:
          type: number
        averageMessagesPerSession:
          type: number
        timestamp:
          type: string
          format: date-time
      example:
        totalSessions: 150
        activeSessions: 12
        totalMessages: 450
        averageMessagesPerSession: 3
        timestamp: "2025-08-17T10:30:00.000Z"

    CRMStructure:
      type: object
      properties:
        structure:
          type: object
          properties:
            modules:
              type: object
              additionalProperties:
                type: object
                properties:
                  name:
                    type: string
                  route:
                    type: string
                  description:
                    type: string
                  features:
                    type: array
                    items:
                      type: string
            navigation:
              type: object
        timestamp:
          type: string
          format: date-time
        version:
          type: string
      example:
        structure:
          modules:
            dashboard:
              name: "Tableau de bord"
              route: "/dashboard"
              description: "Vue d'ensemble de votre activité"
              features: ["Statistiques", "Graphiques"]
        timestamp: "2025-08-17T10:30:00.000Z"
        version: "1.0.0"

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, OK, ERROR]
        service:
          type: string
        timestamp:
          type: string
          format: date-time
        uptime:
          type: number
          description: Temps de fonctionnement en secondes
        memory:
          type: object
          description: Utilisation mémoire du processus
        connections:
          type: object
          properties:
            bddService:
              type: boolean
            openaiConfigured:
              type: boolean
        activeSessions:
          type: number
        totalSessions:
          type: number
        version:
          type: string
      example:
        status: "healthy"
        service: "AI Service"
        timestamp: "2025-08-17T10:30:00.000Z"
        uptime: 3600
        connections:
          bddService: true
          openaiConfigured: true

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        code:
          type: string
        message:
          type: string
        details:
          type: string
          description: Détails additionnels en mode développement
      example:
        error: "Message requis"
        code: "INVALID_MESSAGE"
        message: "Le message ne peut pas être vide"

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
        sessionId:
          type: string
        timestamp:
          type: string
          format: date-time
      example:
        message: "Session réinitialisée avec succès"
        sessionId: "session123"
        timestamp: "2025-08-17T10:30:00.000Z"

security:
  - bearerAuth: []

paths:
  # AI Analysis endpoints
  /api/ai/analyze/{clientId}:
    get:
      summary: Analyser un client avec l'IA
      tags:
        - Analyse IA
      security:
        - bearerAuth: []
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: string
          description: Identifiant du client à analyser
          example: "client123"
      responses:
        "200":
          description: Analyse du client générée avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientAnalysisResponse"
        "400":
          description: Client ID manquant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erreur lors de l'analyse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/ai/health:
    get:
      summary: Vérification de l'état du service IA
      tags:
        - Surveillance
      security: []
      responses:
        "200":
          description: Service IA en bonne santé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
        "500":
          description: Service IA indisponible
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"

  # Chatbot endpoints
  /api/chatbot/chat:
    post:
      summary: Converser avec le chatbot
      tags:
        - Chatbot
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatRequest"
      responses:
        "200":
          description: Réponse du chatbot générée avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatResponse"
        "400":
          description: Message invalide ou manquant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erreur lors du traitement de la demande
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/chatbot/help:
    post:
      summary: Obtenir de l'aide contextuelle
      tags:
        - Chatbot
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContextualHelpRequest"
      responses:
        "200":
          description: Aide contextuelle générée avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContextualHelpResponse"
        "400":
          description: Route actuelle manquante ou invalide
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erreur lors de la récupération de l'aide
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/chatbot/search:
    post:
      summary: Rechercher des fonctionnalités
      tags:
        - Chatbot
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
      responses:
        "200":
          description: Résultats de recherche obtenus avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
        "400":
          description: Terme de recherche manquant ou invalide
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erreur lors de la recherche
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/chatbot/history/{sessionId}:
    get:
      summary: Obtenir l'historique d'une conversation
      tags:
        - Chatbot
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Identifiant de la session
          example: "session123"
      responses:
        "200":
          description: Historique de conversation récupéré avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationHistory"
        "400":
          description: ID de session manquant ou invalide
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Session non trouvée
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erreur lors de la récupération de l'historique
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/chatbot/reset/{sessionId}:
    post:
      summary: Réinitialiser une session de conversation
      tags:
        - Chatbot
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Identifiant de la session à réinitialiser
          example: "session123"
      responses:
        "200":
          description: Session réinitialisée avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: ID de session manquant ou invalide
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Session non trouvée
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erreur lors de la réinitialisation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/chatbot/stats:
    get:
      summary: Obtenir les statistiques du chatbot
      tags:
        - Chatbot
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Statistiques récupérées avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatbotStats"
        "500":
          description: Erreur lors de la récupération des statistiques
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/chatbot/structure:
    get:
      summary: Obtenir la structure du CRM
      tags:
        - Chatbot
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Structure du CRM récupérée avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CRMStructure"
        "500":
          description: Erreur lors de la récupération de la structure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/chatbot/health:
    get:
      summary: Vérification de l'état du service chatbot
      tags:
        - Surveillance
      security: []
      responses:
        "200":
          description: Service chatbot en bonne santé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
        "503":
          description: Service chatbot indisponible
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
