services:
  # Infrastructure identique mais avec des images plutôt que des builds
  mongo:
    image: mongo:latest
    container_name: crew-crm-mongo-staging
    ports:
      - "27017:27017"
    volumes:
      - mongo-staging-data:/data/db
    networks:
      - crew-crm-staging-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:latest
    container_name: crew-crm-redis-staging
    ports:
      - "6379:6379"
    volumes:
      - redis-staging-data:/data
    networks:
      - crew-crm-staging-network
    command: redis-server --appendonly yes --requirepass crew-crm-redis-password
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Les services utiliseront les images buildées
  # (les images seront remplacées par le script CI/CD)
  bdd-service:
    image: crew-crm/bdd-service:staging
    container_name: crew-crm-bdd-staging
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=staging
      - PORT=3001
      - FRONTEND_URL=http://localhost:3000
      - MONGO_URI=mongodb://mongo:27017/bdd-services-staging
      - JWT_SECRET=staging-secret-key
      - REDIS_URL=redis://:crew-crm-redis-password@redis:6379
      - LOG_LEVEL=info
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crew-crm-staging-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --quiet --tries=1 --spider http://localhost:3001/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  authentication-service:
    image: crew-crm/authentication-service:staging
    container_name: crew-crm-auth-staging
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=staging
      - PORT=3002
      - MONGO_URI=mongodb://mongo:27017/authentication-service-staging
      - JWT_SECRET=staging-secret-key
      - REDIS_URL=redis://:crew-crm-redis-password@redis:6379
      - LOG_LEVEL=info
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crew-crm-staging-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --quiet --tries=1 --spider http://localhost:3002/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  notification-mail-sms-service:
    image: crew-crm/notification-mail-sms-service:staging
    container_name: crew-crm-notifications-staging
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=staging
      - PORT=3003
      - MONGO_URI=mongodb://mongo:27017/notification-service-staging
      - JWT_SECRET=staging-secret-key
      - LOG_LEVEL=info
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - crew-crm-staging-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --quiet --tries=1 --spider http://localhost:3003/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  metrics-service:
    image: crew-crm/metrics-service:staging
    container_name: crew-crm-metrics-staging
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=staging
      - PORT=3004
      - JWT_SECRET=staging-secret-key
      - LOG_LEVEL=info
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - crew-crm-staging-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --quiet --tries=1 --spider http://localhost:3004/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  service-ia:
    image: crew-crm/service-ia:staging
    container_name: crew-crm-ia-staging
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=staging
      - PORT=3005
      - MONGO_URI=mongodb://mongo:27017/ia-services-staging
      - JWT_SECRET=staging-secret-key
      - LOG_LEVEL=info
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - crew-crm-staging-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --quiet --tries=1 --spider http://localhost:3005/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  payment-service:
    image: crew-crm/payment-service:staging
    container_name: crew-crm-payment-staging
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=staging
      - PORT=3006
      - MONGO_URI=mongodb://mongo:27017/payment-services-staging
      - JWT_SECRET=staging-secret-key
      - LOG_LEVEL=info
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - crew-crm-staging-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --quiet --tries=1 --spider http://localhost:3006/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  frontend:
    image: crew-crm/frontend:staging
    container_name: crew-crm-frontend-staging
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=staging
      - PORT=3000
      - NEXT_PUBLIC_API_URL=http://localhost:3002/api/
      - NEXT_PUBLIC_API_URL_BDD=http://localhost:3001/api/
      - NEXT_PUBLIC_API_URL_NOTIFICATION=http://localhost:3003/api/
      - NEXT_PUBLIC_API_URL_METRICS=http://localhost:3004/api/
      - NEXT_PUBLIC_API_URL_IA=http://localhost:3005/api/
      - NEXT_PUBLIC_API_URL_PAYMENT=http://localhost:3006/api/
    depends_on:
      bdd-service:
        condition: service_healthy
      authentication-service:
        condition: service_healthy
      notification-mail-sms-service:
        condition: service_healthy
      metrics-service:
        condition: service_healthy
      service-ia:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    networks:
      - crew-crm-staging-network

networks:
  crew-crm-staging-network:
    driver: bridge

volumes:
  mongo-staging-data:
  redis-staging-data:
